const bcrypt = require("bcryptjs");
const { sequelize, Device, Error, ErrorStep, Admin } = require("../models");
require("dotenv").config();

async function initializeDatabase() {
  console.log("üîÑ Initializing ANT-V3 database...");

  try {
    // Test connection
    await sequelize.authenticate();
    console.log("‚úÖ Database connection established.");

    // Sync models
    await sequelize.sync({ force: true });
    console.log("‚úÖ Database models synchronized.");

    // Create default admin user
    const adminPassword = await bcrypt.hash(
      process.env.ADMIN_DEFAULT_PASSWORD || "admin123",
      12,
    );

    const admin = await Admin.create({
      username: "admin",
      email: "admin@ant-v3.com",
      password_hash: adminPassword,
      role: "super_admin",
      is_active: true,
    });
    console.log("‚úÖ Default admin user created.");

    // Create sample devices
    const devices = [
      {
        device_id: "openbox",
        name: "OpenBox",
        model: "S9 HD PVR",
        manufacturer: "OpenBox",
        description: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å —Å –±–∞–∑–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º",
        icon_name: "Tv",
        color_scheme: "from-blue-500 to-blue-600",
        features: ["HD –ø–æ–¥–¥–µ—Ä–∂–∫–∞", "USB –∑–∞–ø–∏—Å—å", "Ethernet"],
        specifications: {
          processor: "BCM7362",
          memory: "512MB",
          storage: "256MB",
          tuner: "DVB-S2",
        },
        firmware_version: "v2.1.45",
        supported_channels: 147,
        price_range: "–æ—Ç 3,500 ‚ÇΩ",
        popularity_score: 84,
        user_count: "2.3M+",
        status: "active",
        is_supported: true,
        support_level: "standard",
        sort_order: 1,
      },
      {
        device_id: "openbox-gold",
        name: "OpenBox Gold",
        model: "A5 Plus 4K",
        manufacturer: "OpenBox",
        description: "–ü—Ä–µ–º–∏—É–º –º–æ–¥–µ–ª—å —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏",
        icon_name: "Monitor",
        color_scheme: "from-amber-500 to-orange-600",
        features: ["4K ÔøΩÔøΩ–æ–¥–¥–µ—Ä–∂–∫–∞", "Smart –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "WiFi –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π"],
        specifications: {
          processor: "BCM7252S",
          memory: "1GB",
          storage: "8GB",
          tuner: "DVB-S2X",
        },
        firmware_version: "v3.2.18",
        supported_channels: 203,
        price_range: "–æ—Ç 7,200 ‚ÇΩ",
        popularity_score: 94,
        user_count: "1.8M+",
        status: "active",
        is_supported: true,
        support_level: "premium",
        sort_order: 2,
      },
      {
        device_id: "uclan",
        name: "Uclan",
        model: "Denys H.265",
        manufacturer: "Uclan",
        description: "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–∏—Å—Ç–∞–≤–∫–∞ –¥–ª—è IPTV",
        icon_name: "Radio",
        color_scheme: "from-purple-500 to-purple-600",
        features: ["Multi-—Ç—é–Ω–µ—Ä", "IPTV", "Web –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"],
        specifications: {
          processor: "HiSilicon Hi3798MV200",
          memory: "2GB",
          storage: "8GB",
          tuner: "DVB-S2 + DVB-T2",
        },
        firmware_version: "v4.1.7",
        supported_channels: 312,
        price_range: "–æ—Ç 5,800 ‚ÇΩ",
        popularity_score: 78,
        user_count: "1.2M+",
        status: "active",
        is_supported: true,
        support_level: "premium",
        sort_order: 3,
      },
    ];

    for (const deviceData of devices) {
      await Device.create(deviceData);
    }
    console.log("‚úÖ Sample devices created.");

    // Create sample errors
    const errors = [
      {
        error_key: "signal",
        category: "signal",
        title: "–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–∏–≥–Ω–∞–ª–æ–º",
        description: "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–∏–≥–Ω–∞–ª–∞, —Å–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª –∏–ª–∏ –ø–æ–º–µ—Ö–∏",
        icon_name: "Signal",
        color_scheme: "from-red-500 to-red-600",
        priority: "high",
        frequency_percentage: 89,
        avg_resolve_time: "5-10 –º–∏–Ω",
        sort_order: 1,
      },
      {
        error_key: "no-signal",
        parent_error_key: "signal",
        category: "signal",
        title: "–ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞",
        description: "–ü–æ–ª–Ω–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö",
        icon_name: "AlertTriangle",
        color_scheme: "from-red-500 to-red-600",
        priority: "critical",
        difficulty: "easy",
        frequency_percentage: 95,
        avg_resolve_time: "5 –º–∏–Ω",
        popularity_score: 95,
        symptoms: [
          "–ß–µ—Ä–Ω—ã–π —ç–∫—Ä–∞–Ω ÔøΩÔøΩ–∞ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö",
          "–°–æ–æ–±—â–µ–Ω–∏–µ '–ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞'",
          "–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 0%",
        ],
        causes: [
          "–û—Ç–∫–ª—é—á–µ–Ω –∫–∞–±–µ–ª—å –∞–Ω—Ç–µ–Ω–Ω—ã",
          "–ù–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å LNB",
          "–ü–æ–ª–æ–º–∫–∞ –∫–∞–±–µ–ª—è",
          "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω—Ç–µ–Ω–Ω—ã",
        ],
        sort_order: 1,
      },
      {
        error_key: "channels",
        category: "channels",
        title: "–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–∞–Ω–∞–ª–∞–º–∏",
        description: "–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞",
        icon_name: "Tv",
        color_scheme: "from-orange-500 to-orange-600",
        priority: "medium",
        frequency_percentage: 76,
        avg_resolve_time: "10-15 –º–∏–Ω",
        sort_order: 2,
      },
      {
        error_key: "encrypted",
        parent_error_key: "channels",
        category: "channels",
        title: "–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã",
        description: "–ö–∞–Ω–∞–ª—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç",
        icon_name: "Shield",
        color_scheme: "from-orange-500 to-orange-600",
        priority: "medium",
        difficulty: "medium",
        frequency_percentage: 88,
        avg_resolve_time: "10 –º–∏–Ω",
        popularity_score: 88,
        symptoms: [
          "–ß–µ—Ä–Ω—ã–π —ç–∫—Ä–∞–Ω —Å –∑–∞–º–∫–æ–º",
          "–°–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–¥–∏—Ä–æ–≤–∫–µ",
          "–ó–≤—É–∫ –µ—Å—Ç—å, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç",
        ],
        causes: [
          "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç CAM –º–æ–¥—É–ª—å",
          "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–æ—Å—Ç—É–ø–∞",
          "–ò—Å—Ç–µ–∫ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏",
          "–ù–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å —Å–º–∞—Ä—Ç-–∫–∞—Ä—Ç—ã",
        ],
        sort_order: 1,
      },
    ];

    for (const errorData of errors) {
      await Error.create(errorData);
    }
    console.log("‚úÖ Sample errors created.");

    // Create sample error steps
    const errorSteps = [
      {
        error_id: (await Error.findOne({ where: { error_key: "no-signal" } }))
          .id,
        step_order: 1,
        title: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–±–µ–ª—è",
        description:
          "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–æ–∞–∫—Å–∏–∞–ª—å–Ω—ã–π –∫–∞–±–µ–ª—å –Ω–∞–¥–µ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –ø—Ä–∏—Å—Ç–∞–≤–∫–µ –∏ –∞–Ω—Ç–µ–Ω–Ω–µ",
        action_type: "check",
        expected_result: "–ö–∞–±–µ–ª—å –ø–ª–æ—Ç–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –±–µ–∑ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π",
        troubleshooting_tips: [
          "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ F-—Ä–∞–∑—ä–µ–º—ã –Ω–∞ –∫–æ—Ä—Ä–æ–∑–∏—é",
          "–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–µ—Ä–µ–≥–∏–±–æ–≤ –∫–∞–±–µ–ª—è",
        ],
        is_critical: true,
      },
      {
        error_id: (await Error.findOne({ where: { error_key: "no-signal" } }))
          .id,
        step_order: 2,
        title: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–Ω—Ç–µ–Ω–Ω—ã",
        description: "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤",
        action_type: "configure",
        expected_result: "–ü—Ä–∏—Å—Ç–∞–≤–∫–∞ –Ω–∞–π–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã",
        troubleshooting_tips: [
          "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫",
          "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø—É—Ç–Ω–∏–∫–∞",
        ],
        is_critical: true,
      },
    ];

    for (const stepData of errorSteps) {
      await ErrorStep.create(stepData);
    }
    console.log("‚úÖ Sample error steps created.");

    console.log("üéâ Database initialization completed successfully!");
    console.log("üìß Admin credentials:");
    console.log("   Username: admin");
    console.log(
      "   Password:",
      process.env.ADMIN_DEFAULT_PASSWORD || "admin123",
    );
  } catch (error) {
    console.error("‚ùå Database initialization failed:", error);
    process.exit(1);
  } finally {
    await sequelize.close();
  }
}

// Run initialization if called directly
if (require.main === module) {
  initializeDatabase();
}

module.exports = { initializeDatabase };
